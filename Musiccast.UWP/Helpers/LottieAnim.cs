//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using Microsoft.Graphics.Canvas.Geometry;
using Microsoft.UI.Xaml.Controls;
using System;
using System.Numerics;
using Windows.UI;
using Windows.UI.Composition;

namespace AnimatedVisuals
{
    sealed class LottieAnim : IAnimatedVisualSource
    {
        public IAnimatedVisual TryCreateAnimatedVisual(Compositor compositor, out object diagnostics)
        {
            diagnostics = null;
            if (!IsRuntimeCompatible())
            {
                return null;
            }
            return new AnimatedVisual(compositor);
        }

        static bool IsRuntimeCompatible()
        {
            if (!Windows.Foundation.Metadata.ApiInformation.IsTypePresent("Windows.UI.Composition.CompositionGeometricClip"))
            {
                return false;
            }
            return true;
        }

        sealed class AnimatedVisual : IAnimatedVisual
        {
            const long c_durationTicks = 10010000;
            readonly Compositor _c;
            readonly ExpressionAnimation _reusableExpressionAnimation;
            CompositionColorBrush _colorBrush_Black;
            CompositionColorBrush _colorBrush_Red;
            CubicBezierEasingFunction _cubicBezierEasingFunction_0;
            CubicBezierEasingFunction _cubicBezierEasingFunction_1;
            CubicBezierEasingFunction _cubicBezierEasingFunction_2;
            CubicBezierEasingFunction _cubicBezierEasingFunction_3;
            StepEasingFunction _holdThenStepEasingFunction;
            ContainerVisual _root;
            ExpressionAnimation _scalarExpressionAnimation;

            CompositionColorBrush ColorBrush_Black()
            {
                return _colorBrush_Black = _c.CreateColorBrush(Color.FromArgb(0xFF, 0x00, 0x00, 0x00));
            }

            CompositionColorBrush ColorBrush_Red()
            {
                return _colorBrush_Red = _c.CreateColorBrush(Color.FromArgb(0xFF, 0xFF, 0x00, 0x00));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_0()
            {
                return _cubicBezierEasingFunction_0 = _c.CreateCubicBezierEasingFunction(new Vector2(0.400000006F, 0.800000012F), new Vector2(0.74000001F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_1()
            {
                return _cubicBezierEasingFunction_1 = _c.CreateCubicBezierEasingFunction(new Vector2(0.839999974F, 0), new Vector2(0.159999996F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_2()
            {
                return _cubicBezierEasingFunction_2 = _c.CreateCubicBezierEasingFunction(new Vector2(0.419999987F, 0), new Vector2(0.579999983F, 1));
            }

            CubicBezierEasingFunction CubicBezierEasingFunction_3()
            {
                return _cubicBezierEasingFunction_3 = _c.CreateCubicBezierEasingFunction(new Vector2(0.479999989F, 0.0399999991F), new Vector2(0.519999981F, 0.959999979F));
            }

            CanvasGeometry Geometry_0()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-226, -236));
                    builder.AddLine(new Vector2(-226, 242));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_1()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-114, -236));
                    builder.AddLine(new Vector2(-114, 242));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_2()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(-2, -236));
                    builder.AddLine(new Vector2(-2, 242));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_3()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(114, -236));
                    builder.AddLine(new Vector2(114, 242));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            CanvasGeometry Geometry_4()
            {
                CanvasGeometry result;
                using (var builder = new CanvasPathBuilder(null))
                {
                    builder.SetFilledRegionDetermination(CanvasFilledRegionDetermination.Winding);
                    builder.BeginFigure(new Vector2(226, -236));
                    builder.AddLine(new Vector2(226, 242));
                    builder.EndFigure(CanvasFigureLoop.Open);
                    result = CanvasGeometry.CreatePath(builder);
                }
                return result;
            }

            StepEasingFunction HoldThenStepEasingFunction()
            {
                var result = _holdThenStepEasingFunction = _c.CreateStepEasingFunction();
                result.IsFinalStepSingleFrame  = true;
                return result;
            }

            // パス 1
            // パス 1.PathGeometry
            CompositionPathGeometry PathGeometry_0()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_0()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0p2_to_0p2_0());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", ScalarExpressionAnimation());
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p8_to_0p8_0());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // パス 1
            // パス 1.PathGeometry
            CompositionPathGeometry PathGeometry_1()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_1()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0p4_to_0p4_0());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p6_to_0p6_0());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // パス 1
            // パス 1.PathGeometry
            CompositionPathGeometry PathGeometry_2()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_2()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0p1_to_0p1());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p9_to_0p9());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // パス 1
            // パス 1.PathGeometry
            CompositionPathGeometry PathGeometry_3()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_3()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0p4_to_0p4_1());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p6_to_0p6_1());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // パス 1
            // パス 1.PathGeometry
            CompositionPathGeometry PathGeometry_4()
            {
                var result = _c.CreatePathGeometry(new CompositionPath(Geometry_4()));
                result.StartAnimation("TrimStart", TrimStartScalarAnimation_0p2_to_0p2_1());
                var controller = result.TryGetAnimationController("TrimStart");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                result.StartAnimation("TrimEnd", TrimEndScalarAnimation_0p8_to_0p8_1());
                controller = result.TryGetAnimationController("TrimEnd");
                controller.Pause();
                controller.StartAnimation("Progress", _scalarExpressionAnimation);
                return result;
            }

            // The root of the composition.
            ContainerVisual Root()
            {
                var result = _root = _c.CreateContainerVisual();
                var propertySet = result.Properties;
                propertySet.InsertScalar("Progress", 0);
                var children = result.Children;
                children.InsertAtTop(ShapeVisual());
                return result;
            }

            ExpressionAnimation ScalarExpressionAnimation()
            {
                var result = _scalarExpressionAnimation = _c.CreateExpressionAnimation();
                result.SetReferenceParameter("_", _root);
                result.Expression = "_.Progress";
                return result;
            }

            ShapeVisual ShapeVisual()
            {
                var result = _c.CreateShapeVisual();
                result.Size = new Vector2(600, 600);
                var shapes = result.Shapes;
                // パス 1
                shapes.Add(SpriteShape_0());
                // パス 1
                shapes.Add(SpriteShape_1());
                // パス 1
                shapes.Add(SpriteShape_2());
                // パス 1
                shapes.Add(SpriteShape_3());
                // パス 1
                shapes.Add(SpriteShape_4());
                return result;
            }

            // パス 1
            CompositionSpriteShape SpriteShape_0()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 300);
                result.FillBrush = ColorBrush_Red();
                result.Geometry = PathGeometry_0();
                result.StrokeBrush = ColorBrush_Black();
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 40;
                return result;
            }

            // パス 1
            CompositionSpriteShape SpriteShape_1()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 300);
                result.FillBrush = _colorBrush_Red;
                result.Geometry = PathGeometry_1();
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 40;
                return result;
            }

            // パス 1
            CompositionSpriteShape SpriteShape_2()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 300);
                result.FillBrush = _colorBrush_Red;
                result.Geometry = PathGeometry_2();
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 40;
                return result;
            }

            // パス 1
            CompositionSpriteShape SpriteShape_3()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 300);
                result.FillBrush = _colorBrush_Red;
                result.Geometry = PathGeometry_3();
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 40;
                return result;
            }

            // パス 1
            CompositionSpriteShape SpriteShape_4()
            {
                var result = _c.CreateSpriteShape();
                result.TransformMatrix = new Matrix3x2(1, 0, 0, 1, 300, 300);
                result.FillBrush = _colorBrush_Red;
                result.Geometry = PathGeometry_4();
                result.StrokeBrush = _colorBrush_Black;
                result.StrokeDashCap = CompositionStrokeCap.Round;
                result.StrokeEndCap = CompositionStrokeCap.Round;
                result.StrokeLineJoin = CompositionStrokeLineJoin.Round;
                result.StrokeStartCap = CompositionStrokeCap.Round;
                result.StrokeMiterLimit = 4;
                result.StrokeThickness = 40;
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p6_to_0p6_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.600000024F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.266666651F, 0.850000024F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.49999997F, 0.699999988F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.73333329F, 0.899999976F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(1, 0.600000024F, _cubicBezierEasingFunction_0);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p6_to_0p6_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.600000024F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.233333319F, 0.800000012F, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(0.466666639F, 0.600000024F, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(0.73333329F, 1, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(1, 0.600000024F, _cubicBezierEasingFunction_2);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p8_to_0p8_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.800000012F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.266666651F, 0.600000024F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.49999997F, 0.899999976F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.73333329F, 0.649999976F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(1, 0.800000012F, _cubicBezierEasingFunction_0);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p8_to_0p8_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.800000012F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.166666657F, 0.699999988F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(0.366666645F, 0.899999976F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(0.566666663F, 0.600000024F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(0.833333313F, 0.850000024F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(1, 0.800000012F, _cubicBezierEasingFunction_3);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimEnd
            ScalarKeyFrameAnimation TrimEndScalarAnimation_0p9_to_0p9()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.899999976F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.266666651F, 0.649999976F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.49999997F, 0.75F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.699999988F, 0.600000024F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(1, 0.899999976F, _cubicBezierEasingFunction_1);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p1_to_0p1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.100000001F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.266666651F, 0.349999994F, CubicBezierEasingFunction_1());
                result.InsertKeyFrame(0.49999997F, 0.25F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(0.699999988F, 0.400000006F, _cubicBezierEasingFunction_1);
                result.InsertKeyFrame(1, 0.100000001F, _cubicBezierEasingFunction_1);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p2_to_0p2_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.200000003F, HoldThenStepEasingFunction());
                result.InsertKeyFrame(0.266666651F, 0.400000006F, CubicBezierEasingFunction_0());
                result.InsertKeyFrame(0.49999997F, 0.100000001F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.73333329F, 0.349999994F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(1, 0.200000003F, _cubicBezierEasingFunction_0);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p2_to_0p2_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.200000003F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.166666657F, 0.300000012F, CubicBezierEasingFunction_3());
                result.InsertKeyFrame(0.366666645F, 0.100000001F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(0.566666663F, 0.400000006F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(0.833333313F, 0.150000006F, _cubicBezierEasingFunction_3);
                result.InsertKeyFrame(1, 0.200000003F, _cubicBezierEasingFunction_3);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p4_to_0p4_0()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.400000006F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.266666651F, 0.150000006F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.49999997F, 0.300000012F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(0.73333329F, 0.100000001F, _cubicBezierEasingFunction_0);
                result.InsertKeyFrame(1, 0.400000006F, _cubicBezierEasingFunction_0);
                return result;
            }

            // パス 1
            //   パス 1.PathGeometry
            // TrimStart
            ScalarKeyFrameAnimation TrimStartScalarAnimation_0p4_to_0p4_1()
            {
                var result = _c.CreateScalarKeyFrameAnimation();
                result.Duration = TimeSpan.FromTicks(c_durationTicks);
                result.InsertKeyFrame(0, 0.400000006F, _holdThenStepEasingFunction);
                result.InsertKeyFrame(0.233333319F, 0.200000003F, CubicBezierEasingFunction_2());
                result.InsertKeyFrame(0.466666639F, 0.400000006F, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(0.73333329F, 0, _cubicBezierEasingFunction_2);
                result.InsertKeyFrame(1, 0.400000006F, _cubicBezierEasingFunction_2);
                return result;
            }

            internal AnimatedVisual(Compositor compositor)
            {
                _c = compositor;
                _reusableExpressionAnimation = compositor.CreateExpressionAnimation();
                Root();
            }

            Visual IAnimatedVisual.RootVisual => _root;
            TimeSpan IAnimatedVisual.Duration => TimeSpan.FromTicks(c_durationTicks);
            Vector2 IAnimatedVisual.Size => new Vector2(600, 600);
            void IDisposable.Dispose() => _root?.Dispose();
        }
    }
}
